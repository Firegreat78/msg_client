// Copyright 2025 Medvedev Dan (https://github.com/Firegreat78)

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "messagewidget.h"
#include "messageinfo.h"
#include "socketmanager.h"
#include "windowmanager.h"


#include <QMenu>
#include <QContextMenuEvent>
#include <QTimeZone>


// text length can not be zero
std::vector<QString> MessageWidget::splitTextIntoLines(const QString& text)
{
    std::vector<QString> lines;
    qsizetype const lineAmount = (text.length() / MAX_CHARS_PER_LINE) + 1;
    for (qsizetype i = 0; i < lineAmount; i++)
    {
        QString line = text.mid(i * MAX_CHARS_PER_LINE, MAX_CHARS_PER_LINE);
        lines.push_back(line);
    }
    return lines;
}

MessageWidget::MessageWidget(MessageInfo const& info,
                             QWidget *parent)
    : QWidget{parent}
{
    this->info = info;

    // Основной горизонтальный layout
    mainLayout = new QHBoxLayout(this);
    mainLayout->setContentsMargins(10, 2, 10, 2);
    mainLayout->setSpacing(0);

    // Внутренний вертикальный layout (заголовок + текст)
    contentLayout = new QVBoxLayout();
    contentLayout->setSpacing(4);
    contentLayout->setContentsMargins(10, 6, 10, 6);

    if (info.isReadByOther)
    {
        isReadLabel = new QLabel("Сообщение прочитано", this);
        isReadLabel->setStyleSheet("background-color: #d0f4f7; padding: 10px; border-radius: 8px;");
    }
    else
    {
        isReadLabel = new QLabel("Сообщение не прочитано", this);
        isReadLabel->setStyleSheet("background-color: #f7d0d0; padding: 10px; border-radius: 8px;");
    }

    if (this->info.replyID != 0)
        replyLabel = new QLabel(this->info.repliedUsername+": "+this->info.replyText, this);
    else
        replyLabel = new QLabel(this->info.replyText, this);

    replyLabel->setWordWrap(true);
    replyLabel->setStyleSheet("color: gray; font-style: italic; background-color: #F0F0F0; padding: 4px; border-left: 3px solid #CCCCCC;");
    replyLabel->setTextInteractionFlags(Qt::TextSelectableByMouse);
    replyLabel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum);
    contentLayout->addWidget(replyLabel);

    replyLabel->setVisible(info.hasReply);

    // Заголовок
    QString const headerText = QString("<b>%1</b>  <small>%2</small>")
                             .arg(this->info.username)
                             .arg(this->info.tsStr);
    headerLabel = new QLabel(headerText, this);

    headerLabel->setTextFormat(Qt::RichText);
    headerLabel->setWordWrap(false);
    headerLabel->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Fixed);

    // Тело сообщения
    std::vector<QString> lines = splitTextIntoLines(this->info.text);
    textLabels.resize(lines.size());
    for (size_t i = 0; i < lines.size(); i++)
    {
        textLabels[i] = new QLabel(lines[i], this);
        textLabels[i]->setWordWrap(true);
        textLabels[i]->setTextInteractionFlags(Qt::TextSelectableByMouse);
        textLabels[i]->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
        textLabels[i]->setMaximumWidth(400);
        textLabels[i]->setTextFormat(Qt::RichText);
    }

    // Цвета и стиль
    QString bubbleColor = this->info.isOwnMessage ? "#D2F8D2" : "#FFFFFF";
    QString style = QString("background-color: %1; border-radius: 12px;").arg(bubbleColor);

    bubbleWidget = new QWidget(this);
    bubbleWidget->setLayout(contentLayout);
    bubbleWidget->setStyleSheet(style);
    bubbleWidget->setSizePolicy(QSizePolicy::Maximum, QSizePolicy::Minimum);

    contentLayout->addWidget(headerLabel);

    QString const lastEditedTsText = QString("<small>Изменено %1</small>").arg(info.lastEditedTs);
    lastEditedLabel = new QLabel(lastEditedTsText, this);
    contentLayout->addWidget(lastEditedLabel);
    lastEditedLabel->setVisible(info.lastEditedTs.length() != 0);

    for (size_t i = 0; i < textLabels.size(); i++) contentLayout->addWidget(textLabels[i]);

    if (this->info.isOwnMessage)
    {
        mainLayout->addStretch();
        mainLayout->addWidget(bubbleWidget);
    }

    else
    {
        mainLayout->addWidget(bubbleWidget);
        mainLayout->addStretch();
    }

    this->setLayout(mainLayout);
    this->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Minimum);
    contentLayout->addWidget(isReadLabel);
}

void MessageWidget::resetStyle()
{
    setColor(this->info.isOwnMessage ? "#D2F8D2" : "#FFFFFF");
}

void MessageWidget::setStylePendingAnswer()
{
    setColor("#C2C8FF");
}

void MessageWidget::setStylePendingEdit()
{
    setColor("#FFFF7F");
}

void MessageWidget::setColor(QString const& color)
{
    QString const style = QString("background-color: %1; border-radius: 12px;").arg(color);
    bubbleWidget->setStyleSheet(style);
}

void MessageWidget::updateText(QString const& text)
{
    std::vector<QString> lines = splitTextIntoLines(text);
    qsizetype const current_size = textLabels.size();
    qsizetype const new_size = lines.size();
    for (qsizetype i = 0; i < std::min(new_size, current_size); i++) textLabels[i]->setText(lines[i]);

    if (current_size < new_size)
    {
        textLabels.resize(new_size);
        for (qsizetype i = 0; i < new_size - current_size; i++)
        {
            textLabels[i+current_size] = new QLabel(lines[i+current_size], this);
            textLabels[i+current_size]->setWordWrap(true);
            textLabels[i+current_size]->setTextInteractionFlags(Qt::TextSelectableByMouse);
            textLabels[i+current_size]->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Preferred);
            textLabels[i+current_size]->setMaximumWidth(400);
            textLabels[i+current_size]->setTextFormat(Qt::RichText);
            contentLayout->addWidget(textLabels[i+current_size]);
        }
    }
    else if (current_size > new_size)
    {
        for (qsizetype i = 0; i < current_size - new_size; i++)
        {
            contentLayout->removeWidget(textLabels[current_size - i - 1]);
            textLabels[current_size - i - 1]->deleteLater();
            textLabels.pop_back();
        }
    }
}

void MessageWidget::updateUsername(QString const& username)
{
    this->info.username = username;
    QString const headerText = QString("<b>%1</b>  <small>%2</small>")
    .arg(this->info.username)
        .arg(this->info.tsStr);

    headerLabel->setText(headerText);
}

void MessageWidget::updateInfo(MessageInfo const& info)
{
    replyLabel->setVisible(info.hasReply);
    this->info = info;
    if (this->info.replyID != 0)
        this->replyLabel->setText(this->info.repliedUsername+": "+this->info.replyText);
    else
        this->replyLabel->setText(this->info.replyText);

    this->updateText(this->info.text);
    QString const headerText = QString("<b>%1</b>  <small>%2</small>")
                                   .arg(this->info.username)
                                   .arg(this->info.tsStr);
    headerLabel->setText(headerText);

    QString const lastEditedTsText = QString("<small>Изменено %1</small>").arg(info.lastEditedTs);
    lastEditedLabel->setText(lastEditedTsText);
    lastEditedLabel->setVisible(this->info.lastEditedTs.length() != 0);

    if (info.isReadByOther)
    {
        isReadLabel->setText("Сообщение прочитано");
        isReadLabel->setStyleSheet("background-color: #d0f4f7; padding: 10px; border-radius: 8px;");
    }
    else
    {
        isReadLabel->setText("Сообщение не прочитано");
        isReadLabel->setStyleSheet("background-color: #f7d0d0; padding: 10px; border-radius: 8px;");
    }
    contentLayout->removeWidget(isReadLabel);
    contentLayout->addWidget(isReadLabel);
}


// dtStr: "2025-05-16 11:20:41+07"
void MessageWidget::updateTimestamp(QString const& dtStr)
{
    this->info.tsStr = WindowManager::convertToLocalTimeString(dtStr);
    QString const headerText = QString("<b>%1</b>  <small>%2</small>")
                                   .arg(this->info.username)
                                   .arg(this->info.tsStr);
    headerLabel->setText(headerText);
}

MessageInfo const& MessageWidget::getInfo()
{
    return this->info;
}

int MessageWidget::getHeight()
{
    return this->height();
}

void MessageWidget::contextMenuEvent(QContextMenuEvent* ev)
{
    QMenu menu(this);
    QAction *replyAction = nullptr;
    QAction *cancelReplyAction = nullptr;
    QAction *editAction = nullptr;
    QAction *cancelEditAction = nullptr;
    QAction *gotoRepliedAction = nullptr;
    QAction *deleteAction = nullptr;

    if (selectedReply) cancelReplyAction = menu.addAction("Отменить ответ на сообщение");
    else replyAction = menu.addAction("Ответить на сообщение");

    if (selectedEdit) cancelEditAction = menu.addAction("Отменить редактирование");
    else if (info.isOwnMessage) editAction = menu.addAction("Отредактировать сообщение");

    if (info.replyID != 0) gotoRepliedAction = menu.addAction("Перейти к ответу");

    if (info.isOwnMessage)
    {
        deleteAction = menu.addAction("Удалить сообщение");
        if (!SocketManager::isConnectedToServer())
            deleteAction->setEnabled(false);
    }

    QAction *selectedAction = menu.exec(ev->globalPos());
    if (selectedAction == nullptr) return;
    int const MAX_SYMBOLS = 30;

    if (selectedAction == replyAction)
    {
        if (selectedEdit) emit cancelEditSelected(info.id);

        emit replyActionSelected(info.id, "@"+info.username,
            info.text.length() > MAX_SYMBOLS ? info.text.first(MAX_SYMBOLS)+"..." : info.text);
    }
    if (selectedAction == cancelReplyAction)
    {
        emit cancelReplySelected(info.id);
    }

    if (selectedAction == editAction)
    {
        if (selectedReply) emit cancelReplySelected(info.id);
        emit editActionSelected(info.id,
            info.text.length() > MAX_SYMBOLS ? info.text.first(MAX_SYMBOLS)+"..." : info.text);
    }
    if (selectedAction == cancelEditAction)
    {
        emit cancelEditSelected(info.id);
    }

    if (selectedAction == deleteAction)
    {
        if (selectedEdit) emit cancelEditSelected(info.id);
        if (selectedReply) emit cancelReplySelected(info.id);
        emit deleteSelected(info.id);
    }

    if (selectedAction == gotoRepliedAction)
    {
        // info.replyID is not 0 here
        // First, we check the chat widget.
        // If the message is within the chat's scope, we simply go to that message.
        // Otherwise we reload the chat with all filters disabled and centered
        // around the target msg
        emit gotoMsg(info.replyID);
    }
}

MessageWidget::~MessageWidget()
{
    contentLayout->deleteLater();
}
