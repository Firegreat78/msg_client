// Copyright 2025 Medvedev Dan (https://github.com/Firegreat78)

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "windowmanager.h"

#include <QCryptographicHash>
#include <QTimeZone>

WindowManager::WindowManager(QObject *parent)
    : QObject{parent}
{
    QRegularExpression regex("^[A-Za-z0-9_]+$");
    loginValidator = std::make_unique<QRegularExpressionValidator>(regex, nullptr);
}

WindowManager& WindowManager::getInstance()
{
    static WindowManager obj;
    return obj;
}


void WindowManager::registerWindow(QString const& id, QMainWindow* window)
{
    windows[id] = window;
}

void WindowManager::hideAllWindows()
{
    for (const auto& [key, window] : windows.asKeyValueRange())
    {
        if (window) window->hide();
    }
}

void WindowManager::showWindow(QString const& id)
{
    if (!windows.contains(id)) return;

    if (!windows[id]->isVisible())
    {
        windows[id]->show();
    }
}

void WindowManager::hideWindow(QString const& id)
{
    if (!windows.contains(id)) return;

    if (windows[id]->isVisible())
    {
        windows[id]->hide();
    }
}

int WindowManager::windowIsShown(QString const& id)
{
    if (!windows.contains(id)) return -1;

    if (windows[id]->isHidden()) return 0;
    return 1;
}

QMainWindow* WindowManager::getWindow(QString const& id)
{
    if (!windows.contains(id)) return nullptr;
    return windows[id];
}

QString WindowManager::sha256FromQString(QString const& input)
{
    // Convert QString to UTF-8 encoded QByteArray
    QByteArray byteArray = input.toUtf8();

    // Generate SHA-256 hash
    QByteArray hashBytes = QCryptographicHash::hash(byteArray, QCryptographicHash::Sha256);

    // Convert hash to hexadecimal string
    return QString(hashBytes.toHex());
}

QString WindowManager::convertToLocalTimeString(QString const& tsStr)
{
    // 1. Парсим дату и время без смещения
    QDateTime timestamp = QDateTime::fromString(tsStr.left(19), "yyyy-MM-dd HH:mm:ss");
    if (!timestamp.isValid()) return {};

    // 2. Извлекаем смещение (например, "+07")
    QString offsetStr = tsStr.mid(19); // "+07" или "-03"
    if (offsetStr.length() < 2) return timestamp.toLocalTime().toString("yyyy-MM-dd HH:mm:ss");

    bool ok = false;
    int offsetHours = offsetStr.toInt(&ok);
    if (!ok) return timestamp.toLocalTime().toString("yyyy-MM-dd HH:mm:ss");

    // 3. Применяем смещение к UTC
    int offsetSeconds = offsetHours * 3600;
    QTimeZone tz(offsetSeconds);
    timestamp.setTimeZone(tz);

    // 4. Конвертируем во время локальной системы и возвращаем строку
    return timestamp.toLocalTime().toString("yyyy-MM-dd HH:mm:ss");
}
