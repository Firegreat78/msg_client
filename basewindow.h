// Copyright 2025 Medvedev Dan (https://github.com/Firegreat78)

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
#ifndef BASEWINDOW_H
#define BASEWINDOW_H

#include "chatwidget.h"

#include <QMainWindow>
#include <QAbstractSocket>
#include <QListWidgetItem>
#include <QMap>
#include <mutex>

namespace Ui {
class BaseWindow;
}

class BaseWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit BaseWindow(QWidget *parent = nullptr);
    ~BaseWindow();
    void customShow();
    void customHide();

    static constexpr int MAX_CHAT_MESSAGES = 30;
    static constexpr int UPDATE_TIMER_DELAY = 1500;

protected:
    void showEvent(QShowEvent*) override;
    void closeEvent(QCloseEvent*) override;
    void hideEvent(QHideEvent*) override;

private:
    std::mutex mutex;
    bool pendingGotoMsg = false;
    bool isLoadingMsgs = false;


    bool isPrivateChat;
    bool isActive = false;

    Ui::BaseWindow *ui;
    QTimer* heartbeatTimer = nullptr;
    QTimer* updateVisibleDataTimer = nullptr;
    ChatWidget* chat = nullptr;

    QString filterContent = "";
    bool isFilterDtEnabled = false;
    QDateTime filterDtBegin;
    QDateTime filterDtEnd;
    bool onlyUnreadFilter = false;

    void handleJSON(QJsonObject const&);
    void chatListResponseHandler(QJsonObject const&);
    void loadChatResponseHandler(QJsonObject const&);
    void loadChatFilterHandler(QJsonObject const&);
    void sendMessageResponseHandler(QJsonObject const&);
    void getNewChatMsgResponse(QJsonObject const&);
    void updateFrontendMsgsHandler(QJsonObject const&);
    void updateUsersListResponseHandler(QJsonObject const&);
    void requestLowerMsgsResponse(QJsonObject const&);
    void requestUpperMsgsResponse(QJsonObject const&);
    void gotoMsgHandler(QJsonObject const&);
    void countUnreadMsgsHandler(QJsonObject const&);

    QString escapedFilterText();
    void resetFilter();

private slots:
    void showAccountInfoWindow();
    void exitAccountActionClicked();
    void sendMessageButtonClicked();
    void updateChatsButtonClicked();

    void sendHeartBeat();
    void onSocketConnected();
    void onSocketDisconnected();
    void onSocketError(QAbstractSocket::SocketError);

    void retryToConnect();

    void chatListDoubleClicked(QListWidgetItem*);

    void updateVisibleData();

    void onJsonArrived();

    void setFilterButtonClicked();
public slots:
    void onSelectedMsgAnswer(int64_t const, QString const, QString const);
    void onCancelAnswering();

    void onSelectedMsgEdit(int64_t const, QString const);
    void onCancelEdit();

    void onDeleteMsg(int64_t);
    void gotoMsg(int64_t);
signals:
};

#endif // BASEWINDOW_H
